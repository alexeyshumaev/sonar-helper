///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с общими методами приложения
//
// (C) Maximov Valery (aka theshadowco)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

// ОбернутьЗначениеДляПечати
//	Формирует строку из значения для удобной печати
// Параметры:
//   Значение - Произвольное - Значение, которое необходимо преобразовать в строку для последующей печати
//
//  Возвращаемое значение:
//   Строка - Преобразованное в строку входное значение. Если значение не заполнено, то вернется "<Незаполнено>"
//
Функция ОбернутьЗначениеДляПечати(Знач Значение) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Строка(Значение);
	КонецЕсли;

	Возврат "<Незаполнено>";

КонецФункции

// ПрочитатьПараметрыЗапуска
//	Читает входные параметры включа конфигурационный файл
// Параметры:
//   ПараметрыКоманды - Соответствие - Входные параметры приложения
//   ВыполнятьПроверкуАвторизацииСразу - Булево - Выполнение проверки корректности параметров авторизации
//
//  Возвращаемое значение:
//   Соответствие - Ключи и значения параметров запуска
//
Функция ПрочитатьПараметрыЗапуска(ПараметрыКоманды, ВыполнятьПроверкуАвторизацииСразу) Экспорт

	Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	
	ПрочитанныеПараметры = Новый Соответствие();
	ОшибокНет = Истина;
	
	ВозможныеКлючи = ВозможныеКлючи();
	Для Каждого ВозможныйКлюч Из ВозможныеКлючи Цикл
		
		ПрочитанныеПараметры.Вставить(ВозможныйКлюч.Ключ, ПараметрыКоманды.Получить(ВозможныйКлюч.Значение));
		
	КонецЦикла;

	ПутьККонфигурационномуФайлу = ПараметрыКоманды["--cfg-file"];
	
	Если ПутьККонфигурационномуФайлу <> Неопределено Тогда
		
		Файл = Новый Файл(ПутьККонфигурационномуФайлу);
		Если Файл.Существует() Тогда
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.Прочитать(ПутьККонфигурационномуФайлу);
			Лог.Отладка("Содержимое конфигурационного файла: %1%2", Символы.ПС, ТекстовыйДокумент.ПолучитьТекст());
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
			ПараметрыИзФайла = ПрочитатьJSON(JSON, Истина);

			Для Каждого ВозможныйКлюч Из ВозможныеКлючи Цикл
				
				ЗначениеИзФайла = ПараметрыИзФайла.Получить(ВозможныйКлюч.Значение);
				Если ЗначениеИзФайла <> Неопределено И ПрочитанныеПараметры.Получить(ВозможныйКлюч.Ключ) = Неопределено Тогда
					ПрочитанныеПараметры.Вставить(ВозможныйКлюч.Ключ, ЗначениеИзФайла);
				КонецЕсли;
				
			КонецЦикла;

		Иначе
			
			Лог.Ошибка("Конфигурационный файл по пути `%1` не обнаружен", ОбернутьЗначениеДляПечати(ПутьККонфигурационномуФайлу));
			ОшибокНет = ЛОЖЬ;

		КонецЕсли;
		
	КонецЕсли;
	
	Лог.Отладка("Прочитанные параметры:");
	Для Каждого ПрочитанныйПараметр Из ПрочитанныеПараметры Цикл
		
		Лог.Отладка("	%2 = `%1`", ОбернутьЗначениеДляПечати(ПрочитанныйПараметр.Значение), ПрочитанныйПараметр.Ключ);
		
	КонецЦикла;
	
	Если ВыполнятьПроверкуАвторизацииСразу Тогда

		Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("Токен")) Тогда
			
			Лог.Ошибка("Не указан токен для авторизации");
			ОшибокНет = Ложь;

		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("АдресСервера")) Тогда

			Лог.Ошибка("Не указан адрес сервера SonarQube");
			ОшибокНет = Ложь;
			
		КонецЕсли;

	КонецЕсли;
	
	ПрочитанныеПараметры.Вставить("ОшибокНет", ОшибокНет);

	Возврат ПрочитанныеПараметры;
	
КонецФункции

// СообщитьОбОшибке
//	Выводит сообщение об ошибке и возвращает статус ошибочного завершения приложения
// Параметры:
//   ТекстОшибки - Строка - Выводимое сообщение об ошибке
//
//  Возвращаемое значение:
//   Число - Код ошибки выполнения
//
Функция СообщитьОбОшибке(ТекстОшибки) Экспорт

	Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	Лог.Ошибка(ТекстОшибки);
	Возврат МенеджерКомандПриложения.РезультатыКоманд().ОшибкаВремениВыполнения;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВозможныеКлючи()
	
	ВозможныеКлючи = Новый Структура();
	ВозможныеКлючи.Вставить("Токен", "--token");
	ВозможныеКлючи.Вставить("АдресСервера", "--server");
	ВозможныеКлючи.Вставить("РодительскийПроект", "--parent-project");
	ВозможныеКлючи.Вставить("ИсключаемыеПроектыСтрокой", "--exclude-projects");
	ВозможныеКлючи.Вставить("СтатусыСтрокой", "--statuses");
	ВозможныеКлючи.Вставить("Теги", "--tags");
	ВозможныеКлючи.Вставить("ИзEDTВКонфигуратор", "--edt2cfg");
	ВозможныеКлючи.Вставить("Проекты", "--projects");
	ВозможныеКлючи.Вставить("Метрики", "--total-metrics");
	ВозможныеКлючи.Вставить("ПутьКОтчету", "--report-path");
	ВозможныеКлючи.Вставить("ФорматОтчета", "--report-format");
	ВозможныеКлючи.Вставить("Пользователи", "--assigned");
	ВозможныеКлючи.Вставить("НазначитьНа", "--assign");

	Возврат ВозможныеКлючи;

КонецФункции
