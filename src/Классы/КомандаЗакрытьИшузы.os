///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды issue-resolver
//
// (C) Maximov Valery (aka theshadowco)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

Перем Лог;

Перем ДочерниеПроекты;
Перем ИсключаемыеПроекты;
Перем Статусы;
Перем МаксимальноеКоличествоСтатусов;

Перем ПрочитанныеПараметры;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выполняет закрытие замечаний (как не требующих исправление) из родительского проекта в дочерних");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--token", "Токен для авторизации на сервере SonarQube");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--server", "Адрес сервера SonarQube (например http://my.sonar.server:9000)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--parent-project", "Ключ родительского проекта (например bsp:master)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--child-projects", "Ключи дочерних проектов, строкой через запятую (например hrm:develop,buh:master).
	|	Для того, чтобы указать все проекты, необходимо передать #all");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--exclude-projects", "Ключи дочерних проектов, которые необходимо исключить из обработки");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--statuses", "Отбор замечаний родительского проекта только соответствующих статусов.
	|	Необходимые статусы необходимо передавать строкой через запятую.
	|	Возможные значения:
	|		OPEN - открытые
	|		CONFIRMED - подтвержденные:
	|		REOPENED - переоткрытые
	|		RESOLVED - решенные
	|		CLOSED - закрытые
	|	
	|	По умолчанию выбираются только RESOLVED и CLOSED");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--edt2cfg", "Необходимо использовать тогда, когда родительский проект в формате EDT, а дочерний в формате конфигуратора");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--tags", "Список тегов, которые будут добавлены к закрываемым замечаниям.
	|	Необходимые теги необходимо передавать строкой через запятую.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cfg-file", "Путь к конфигурационному файлу в формате json (utf-8), свойства объекта соответствуют ключам запуска.
	|	Пример конфигурационного файла находится в каталоге examples");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие -  (необязательно) дополнительные параметры
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	ОшибокНет = ПрочитатьПараметрыЗапуска(ПараметрыКоманды);
	Если НЕ ОшибокНет Тогда
		Возврат ОбщегоНазначения.СообщитьОбОшибке("Ошибка запуска");
	КонецЕсли;
	
	АдресСервера = ПрочитанныеПараметры.Получить("АдресСервера");
	Токен = ПрочитанныеПараметры.Получить("Токен");
	РодительскийПроект = ПрочитанныеПараметры.Получить("РодительскийПроект");
	
	Лог.Информация("Получение информации о проектах");
	ПроектыSQ = Сонар.ПолучитьПроекты(АдресСервера, Токен);
	Лог.Информация("Получение информации о родительском проекте");
	ОписаниеРодительскогоПроекта = ПроектыSQ.Получить(РодительскийПроект);
	Если ОписаниеРодительскогоПроекта = Неопределено Тогда
		Возврат ОбщегоНазначения.СообщитьОбОшибке(СтрШаблон("Родительский проект `%1` в списке проектов не обнаружен", РодительскийПроект));
	КонецЕсли;
	
	Лог.Информация("Получение закрываемых замечаний из родительского проекта");
	ЗамечанияРодительскогоПроекта = Сонар.ПолучитьЗамечанияПроекта(
										АдресСервера, Токен, 
										ОписаниеРодительскогоПроекта,
										СтрСоединить(Статусы, ","),
										ПрочитанныеПараметры.Получить("ИзEDTВКонфигуратор"));

	Если НЕ ЗамечанияРодительскогоПроекта.Количество() Тогда
		
		Лог.Информация("Закрываемых замечаний в родительском проекте нет");
		Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

	КонецЕсли;
	
	Если Статусы.Количество() <> МаксимальноеКоличествоСтатусов Тогда
		Сонар.ЗаполнитьКоличествоОдинаковыхЗамечанийПроекта(
					АдресСервера, Токен, 
					ЗамечанияРодительскогоПроекта);
	КонецЕсли;
	
	Если ДочерниеПроекты.Найти("#all") <> Неопределено Тогда
		ДочерниеПроекты.Очистить();
		Для Каждого ОписаниеПроекта Из ПроектыSQ Цикл
			Если ОписаниеПроекта.Ключ <> РодительскийПроект Тогда
				ДочерниеПроекты.Добавить(ОписаниеПроекта.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого ИсключаемыйПроект Из ИсключаемыеПроекты Цикл
		Позиция = ДочерниеПроекты.Найти(СокрЛП(ИсключаемыйПроект));
		Если Позиция <> Неопределено Тогда
			ДочерниеПроекты.Удалить(Позиция);
		КонецЕсли;
	КонецЦикла;
	
	Лог.Информация("Закрытие замечаний в дочерних проектах");
	Теги = ПрочитанныеПараметры.Получить("Теги");
	Для Каждого ДочернийПроект Из ДочерниеПроекты Цикл
		Лог.Информация("Закрытие замечаний в проекте `%1`", ДочернийПроект);
		ОписаниеПроекта = ПроектыSQ.Получить(СокрЛП(ДочернийПроект));
		Если ОписаниеПроекта = Неопределено Тогда
			Лог.Ошибка("Проект `%1` не обнаружен", ДочернийПроект);
			Продолжить;
		КонецЕсли;

		ЗакрываемыеЗамечания = Сонар.ПолучитьЗакрываемыеЗамечания(АдресСервера, Токен, ОписаниеПроекта, ЗамечанияРодительскогоПроекта);
		Если ЗакрываемыеЗамечания.Количество() Тогда
			Лог.Информация("Для проекта `%1` будет закрыто замечаний: `%2` ", ДочернийПроект, ЗакрываемыеЗамечания.Количество());
			Сонар.ЗакрытьЗамечания(АдресСервера, Токен, ЗакрываемыеЗамечания, "Привнесено '" + РодительскийПроект + "'", Теги);
		Иначе
			Лог.Информация("Для проекта `%1` нет закрываемых замечаний", ДочернийПроект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции 

///////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьПараметрыЗапуска(ПараметрыКоманды)
	
	ПрочитанныеПараметры = ОбщегоНазначения.ПрочитатьПараметрыЗапуска(ПараметрыКоманды, Истина);
	ОшибокНет = ПрочитанныеПараметры.Получить("ОшибокНет");
	МаксимальноеКоличествоСтатусов = 5;

	Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("РодительскийПроект")) Тогда
		Лог.Ошибка("Не указан ключ родительского проекта");
		ОшибокНет = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("ДочерниеПроектыСтрокой")) Тогда
		Лог.Ошибка("Не указаны ключи дочерних проектов");
		ОшибокНет = Ложь;
	Иначе
		ДочерниеПроекты = СтрРазделить(ПрочитанныеПараметры.Получить("ДочерниеПроектыСтрокой"), ", ", Ложь);
	КонецЕсли;

	ИсключаемыеПроекты = Новый Массив();
	Если ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("ИсключаемыеПроектыСтрокой")) Тогда
		ИсключаемыеПроекты = СтрРазделить(ПрочитанныеПараметры.Получить("ИсключаемыеПроектыСтрокой"), ", ", Ложь);
	КонецЕсли;
	ИсключаемыеПроекты.Добавить(СокрЛП(ПрочитанныеПараметры.Получить("РодительскийПроект")));

	Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("СтатусыСтрокой")) Тогда
		Статусы = СтрРазделить("RESOLVED,CLOSED", ",", Ложь);
	Иначе
		Статусы = Новый Массив();
		СтатусыВрем = СтрРазделить(ВРЕГ(ПрочитанныеПараметры.Получить("СтатусыСтрокой")), ", ", Ложь);
		ВсеСтатусы = СтрРазделить("OPEN,CONFIRMED,REOPENED,RESOLVED,CLOSED", ",");
		Для Каждого Статус Из СтатусыВрем Цикл
			Если ВсеСтатусы.Найти(Статус) <> Неопределено Тогда
				Статусы.Добавить(Статус);
			Иначе
				Лог.Ошибка("Неопознанный статус `%1`", Статус);
			КонецЕсли;
		КонецЦикла;
		Если Статусы.Количество() = 0 Тогда
			Лог.Ошибка("Указанный фильтр по статусам не содержит корректных значений");
			ОшибокНет = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("Теги")) Тогда
		ПрочитанныеПараметры.Вставить("Теги", "");
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции
