Перем Лог;

Перем Токен;
Перем АдресСервера;
Перем РодительскийПроект;
Перем Проекты;
Перем Метрики;
Перем ПутьКОтчету;
Перем ФорматОтчета;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Формирует отчет по проекту/списку проектов");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--token", "Токен для авторизации на сервере SonarQube");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--server", "Адрес сервера SonarQube (например http://my.sonar.server:9000)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--projects", "Ключ проектов, строкой через запятую (например hrm:develop,buh)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--total-metrics", "Вывод в отчет метрик по проекту.
	|	Нужные метрики передаются строкой через запятую.
	|	Возможные значения (ключ - расшифровка):
	|		bugs - Ошибки
	|		new_bugs - Ошибки в новом коде
	|		violations - Замечания
	|		new_violations - Замечания в новом коде
	|		ncloc - Строки кода
	|		alert_status - Порог качества 
	|		security_rating - Рейтинг безопасности
	|		reliability_rating - Рейтинг надежности
	|		sqale_index - Технический долг
	|		open_issues - Открытые замечания
	|		reopened_issues - Переоткрытые замечания
	|		wont_fix_issues - Неактуальные замечания
	|		false_positive_issues - Ложное срабатывание
	|		cognitive_complexity - Когнитивная сложность
	|		complexity - Цикломатическая сложность
	|		confirmed_issues - Подтвержденные замечания
	|		blocker_violations - Блокирующие замечания
	|		new_blocker_violations - Блокирующие замечания в новом коде
	|		critical_violations - Критические замечания
	|		new_critical_violations - Критические замечания в новом коде
	|		info_violations - Информационные замечания
	|		new_info_violations - Информационные замечания в новом коде
	|		major_violations - Важные замечания
	|		new_major_violations - Важные замечания в новом коде
	|		minor_violations - Незначительные замечания
	|		new_minor_violations - Незначительные замечания в новом коде
	|		duplicated_blocks - Дублирующиеся участки кода
	|		new_duplicated_blocks - Дублирующиеся участки в новом коде
	|	По умолчанию выводятся все метрики");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--report-path", "Путь для сохранения отчета");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--report-format", "Формат сохраняемого отчета. 
	|	Возможные варианнты:
	|		HTML - создает html - страницу
	|		JSON - выгружает файл json
	|
	|	По умолчанию используется формат JSON");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cfg-file", "Путь к конфигурационному файлу в формате json (utf-8), свойства объекта соответствуют ключам запуска.
	|	Пример конфигурационного файла находится в каталоге examples");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие -  (необязательно) дополнительные параметры
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	ОшибокНет = ПрочитатьПараметрыЗапуска(ПараметрыКоманды);
	Если НЕ ОшибокНет Тогда
		Возврат СообщитьОбОшибке("Ошибка запуска");
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКОтчету) Тогда
		ПутьКОтчету = ОбъединитьПути(".", "report." + НРег(ФорматОтчета));
	КонецЕсли;

	Лог.Информация("Получение информации о проектах");
	ПроектыSQ = Сонар.ПолучитьПроекты(АдресСервера, Токен);
	
	КоллекцияОтчетов = СоздатьКоллекциюОтчетов();
	Лог.Информация("Формирование отчетов по проектам");
	
	КоллекцияПроектов = СтрРазделить(Проекты, ",", Ложь);
	
	Для Каждого Проект Из КоллекцияПроектов Цикл
		Лог.Информация("	Формирование отчета для проекта `%1`", Проект);
		ОписаниеПроекта = ПроектыSQ.Получить(СокрЛП(Проект));
		Если ОписаниеПроекта = Неопределено Тогда
			Лог.Ошибка("		Проект `%1` не обнаружен", Проект);
			Продолжить;
		КонецЕсли;
		
		КоллекцияОтчетов.Отчеты.Добавить(СоздатьОтчет(ОписаниеПроекта, Сонар.ПолучитьМетрикиПроекта(АдресСервера, Токен, ОписаниеПроекта, Метрики)));
		
	КонецЦикла;
	
	КоллекцияОтчетов.Количество = КоллекцияОтчетов.Отчеты.Количество();

	Лог.Информация("Сохранение отчетов в файл '%1'", ПутьКОтчету);
	СформироватьОтчет(КоллекцияОтчетов);
	
	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции 

///////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьПараметрыЗапуска(ПараметрыКоманды)
	
	МаксимальноеКоличествоСтатусов = 5;
	ОшибокНет = Истина;

	Токен = ПараметрыКоманды["--token"];
	АдресСервера = ПараметрыКоманды["--server"];
	Проекты = ПараметрыКоманды["--projects"];
	Метрики = ПараметрыКоманды["--total-metrics"];
	ПутьКОтчету = ПараметрыКоманды["--report-path"];
	ФорматОтчета = ПараметрыКоманды["--report-format"];
	
	ПутьККонфигурационномуФайлу = ПараметрыКоманды["--cfg-file"];
	Если ПутьККонфигурационномуФайлу <> Неопределено Тогда
		
		Файл = Новый Файл(ПутьККонфигурационномуФайлу);
		Если Файл.Существует() Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.Прочитать(ПутьККонфигурационномуФайлу);
			Лог.Отладка("Содержимое конфигурационного файла: %1%2", Символы.ПС, ТекстовыйДокумент.ПолучитьТекст());
			JSON = Новый ЧтениеJSON();
			JSON.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
			ПараметрыИзФайла = ПрочитатьJSON(JSON, Истина);
			Если Токен = Неопределено Тогда
				Токен = ПараметрыИзФайла.Получить("--token");
			КонецЕсли;
			Если АдресСервера = Неопределено Тогда
				АдресСервера = ПараметрыИзФайла.Получить("--server");
			КонецЕсли;
			Если Проекты = Неопределено Тогда
				Проекты = ПараметрыИзФайла.Получить("--projects");
			КонецЕсли;
			Если Метрики = Неопределено Тогда
				Метрики = ПараметрыИзФайла.Получить("--total-metrics");
			КонецЕсли;
			Если ПутьКОтчету = Неопределено Тогда
				ПутьКОтчету = ПараметрыИзФайла.Получить("--report-path");
			КонецЕсли;
			Если ФорматОтчета = Неопределено Тогда
				ФорматОтчета = ПараметрыИзФайла.Получить("--report-format");
			КонецЕсли;
		Иначе
			Лог.Ошибка("Конфигурационный файл по пути `%1` не обнаружен", ОбернутьЗначениеДляПечати(ПутьККонфигурационномуФайлу));
			ОшибокНет = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Лог.Отладка("Прочитанные параметры:");
	Лог.Отладка("	Токен = `%1`", ОбернутьЗначениеДляПечати(Токен));
	Лог.Отладка("	Адрес сервера = `%1`", ОбернутьЗначениеДляПечати(АдресСервера));
	Лог.Отладка("	Ключи проектов = `%1`", ОбернутьЗначениеДляПечати(Проекты));
	Лог.Отладка("	Метрики проекта = `%1`", ОбернутьЗначениеДляПечати(Метрики));
	Лог.Отладка("	Путь к отчету = `%1`", ОбернутьЗначениеДляПечати(ПутьКОтчету));
	Лог.Отладка("	Формат отчета = `%1`", ОбернутьЗначениеДляПечати(ФорматОтчета));
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Лог.Ошибка("Не указан токен для авторизации");
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресСервера) Тогда
		Лог.Ошибка("Не указан адрес сервера SonarQube");
		ОшибокНет = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Проекты) Тогда
		Лог.Ошибка("Не указан ключ(-и) проекта(-ов)");
		ОшибокНет = Ложь;
	КонецЕсли;

	Метрики = ПолучитьПравильныеМетрики(Метрики, ОшибокНет);

	Если Не ЗначениеЗаполнено(ПутьКОтчету) Тогда
		ПутьКОтчету = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ФорматОтчета) Тогда
		ФорматОтчета = "JSON";
	Иначе
		ФорматОтчета = ПолучитьПравильныйФорматОтчета(ФорматОтчета, ОшибокНет);
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

Функция ОбернутьЗначениеДляПечати(Знач Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	Возврат "<Незаполнено>";
КонецФункции

Функция СообщитьОбОшибке(ТекстОшибки)
	
	Лог.Ошибка(ТекстОшибки);
	Возврат МенеджерКомандПриложения.РезультатыКоманд().ОшибкаВремениВыполнения;

КонецФункции

Функция ПолучитьПравильныйФорматОтчета(Знач ВыбранныйФорматОтчета, ОшибокНет)
	
	ВРЕГВыбранныйФорматОтчета = ВРЕГ(ВыбранныйФорматОтчета);
	Если НЕ (ВРЕГВыбранныйФорматОтчета = "HTML" ИЛИ ВРЕГВыбранныйФорматОтчета = "JSON") Тогда
		
		ОшибокНет = Ложь;
		Лог.Ошибка("Указан неизвестный формат отчета `%1`", ОбернутьЗначениеДляПечати(ВыбранныйФорматОтчета));

	КонецЕсли;
	
	Возврат ВРЕГВыбранныйФорматОтчета;

КонецФункции

Функция ПолучитьПравильныеМетрики(Знач ВыбранныеМетрики, ОшибокНет)
	
	ПравильныеМетрики = Новый Структура();
	МетрикиШаблон = Сонар.ДоступныеМетрики();
	Если ПустаяСтрока(ВыбранныеМетрики) Тогда
		Для Каждого Метрика Из МетрикиШаблон Цикл
			ПравильныеМетрики.Вставить(Метрика.Ключ, "");
		КонецЦикла;
	Иначе
		КоллекцияМетрик = СтрРазделить(ВыбранныеМетрики, ",", Ложь);
		Для Каждого Метрика Из КоллекцияМетрик Цикл
			Если МетрикиШаблон.Свойство(СокрЛП(Метрика)) Тогда
				ПравильныеМетрики.Вставить(СокрЛП(Метрика), 0);
			Иначе
				ОшибокНет = Ложь;
				Лог.Ошибка("Указана неизвестная метрика `%1`", ОбернутьЗначениеДляПечати(Метрика));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПравильныеМетрики;

КонецФункции

Функция СоздатьКоллекциюОтчетов() 
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаФормирования", ТекущаяДата());
	Результат.Вставить("СерверSonarQube", АдресСервера);
	Результат.Вставить("Количество", 0);
	Результат.Вставить("Отчеты", Новый Массив());
	
	Возврат Результат;

КонецФункции

Функция СоздатьОтчет(ОписаниеПроекта, МетрикиПроекта)
	
	Результат = Новый Структура();
	Результат.Вставить("КлючПроекта", ОписаниеПроекта.Код);
	Результат.Вставить("Метрики", МетрикиПроекта);
	
	Возврат Результат;

КонецФункции

Процедура СформироватьОтчет(КоллекцияОтчетов)
	
	Если ФорматОтчета = "JSON" Тогда
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.ОткрытьФайл(ПутьКОтчету);
		ЗаписатьJSON(ЗаписьJSON, КоллекцияОтчетов);
		ЗаписьJSON.Закрыть();
	ИначеЕсли ФорматОтчета = "HTML" Тогда
		ДоступныеМетрики = Сонар.ДоступныеМетрики();
		ТекстТаблиц = "";
		Для Каждого Отчет Из КоллекцияОтчетов.Отчеты Цикл
			ТекстСтрок = "";
			Для Каждого Метрика Из Отчет.Метрики Цикл
				Если ДоступныеМетрики.Свойство(Метрика.Ключ) Тогда 
					Продолжить; // оставим только русско-язычные
				КонецЕсли;
				ТекстСтрок = ТекстСтрок + СтрШаблон(ШаблонСтрокаТаблицы(), СтрЗаменить(Метрика.Ключ, "_", " "), Метрика.Значение) + Символы.ПС;
			КонецЦикла;
			ТекстТаблиц = ТекстТаблиц + СтрШаблон(ШаблонТаблица(), Отчет.КлючПроекта, ТекстСтрок) + Символы.ПС;
		КонецЦикла;
		ТекстОтчета = СтрШаблон(ШаблонОтчета(), 
								КоллекцияОтчетов.ДатаФормирования, 
								КоллекцияОтчетов.СерверSonarQube, 
								КоллекцияОтчетов.Количество,
								ТекстТаблиц);

		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.ОткрытьФайл(ПутьКОтчету);
		ЗаписьJSON.ЗаписатьБезОбработки(ТекстОтчета);
		ЗаписьJSON.Закрыть();
	КонецЕсли;

КонецПроцедуры

Функция ШаблонОтчета()
	Возврат
	"<!DOCTYPE html>
	|<html>
	|
	|<head>
	|<meta charset=""utf-8"">
	|<title>Отчет sonar-helper</title>
	|<meta name=""description"" content=""Отчет sonar-helper"">
	|</head>
	|<style>
	|table {
	|margin: 20px 0;
	|text-align: left;
	|border: 1px solid gray;
	|border-spacing: 0px;
	|border-radius: 3px;
	|font-size: 14px;
	|width: auto;
	|}
	|
	|td,
	|th {
	|border: 1px solid gray;
	|padding: 3px;
	|}
	|
	|table#head {
	|margin: 20px 0;
	|text-align: left;
	|border: 0px;
	|border-spacing: 0px;
	|font-size: 14px;
	|width: auto;
	|}
	|
	|table#head td {
	|border: 0px;
	|padding: 3px;
	|}
	|</style>
	|<body>
	|<h1>Отчеты по проектам</h1>
	|<h2>Данные формирования</h2>
	|<table id=""head"">
	|<tr>
	|<td><b>Адрес сервера:</b></td>
	|<td>%2</td>
	|</tr>
	|<tr>
	|<td><b>Дата формирования:</b></td>
	|<td>%1</td>
	|</tr>
	|<tr>
	|<td><b>Количество отчетов:</b></td>
	|<td>%3</td>
	|</tr>
	|</table>
	|<h2>Отчеты по проектам</h2>
	|%4
	|</body>
	|</html>";
КонецФункции

Функция ШаблонТаблица()
	Возврат 
	"<div>
	|<table>
	|<caption><b>Проект: </b>%1</caption>
	|<tr>
	|<th>Метрика</th>
	|<th>Значение</th>
	|</tr>
	|%2
	|</table>
	|</div>";
КонецФункции

Функция ШаблонСтрокаТаблицы()
	Возврат 
	"<tr>
	|<td>%1</td>
	|<td>%2</td>
	|</tr>";
КонецФункции
