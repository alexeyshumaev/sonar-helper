///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды report
//
// (C) Maximov Valery (aka theshadowco)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

Перем Лог;

Перем ПутьКОтчету;
Перем ФорматОтчета;
Перем СтатусыСтрокой;

Перем ПрочитанныеПараметры;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Формирует сводный отчет по наличию замечаний пользователей");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--token", "Токен для авторизации на сервере SonarQube");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--server", "Адрес сервера SonarQube (например http://my.sonar.server:9000)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--projects", "Ключи проектов, строкой через запятую (например hrm:develop,buh)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--statuses", "Отбор замечаний только соответствующих статусов.
	|	Необходимые статусы необходимо передавать строкой через запятую.
	|	Возможные значения:
	|		OPEN - открытые
	|		CONFIRMED - подтвержденные:
	|		REOPENED - переоткрытые
	|		RESOLVED - решенные
	|		CLOSED - закрытые
	|	
	|	По умолчанию выбираются только OPEN, CONFIRMED и REOPENED");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--report-path", "Путь для сохранения отчета");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--report-format", "Формат сохраняемого отчета. 
	|	Возможные варианнты:
	|		HTML - создает html - страницу
	|		JSON - выгружает файл json
	|
	|	По умолчанию используется формат JSON");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cfg-file", "Путь к конфигурационному файлу в формате json (utf-8), свойства объекта соответствуют ключам запуска.
	|	Пример конфигурационного файла находится в каталоге examples");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие -  (необязательно) дополнительные параметры
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	ОшибокНет = ПрочитатьПараметрыЗапуска(ПараметрыКоманды);
	Если НЕ ОшибокНет Тогда
		Возврат ОбщегоНазначения.СообщитьОбОшибке("Ошибка запуска");
	КонецЕсли;
	
	АдресСервера = ПрочитанныеПараметры.Получить("АдресСервера");
	Токен = ПрочитанныеПараметры.Получить("Токен");
	
	Лог.Информация("Получение информации о проектах");
	ПроектыSQ = Сонар.ПолучитьПроекты(АдресСервера, Токен);
	КоллекцияОтчетов = СоздатьКоллекциюОтчетов(АдресСервера);
	
	Лог.Информация("Формирование отчетов по проектам");
	
	Проекты = ПрочитанныеПараметры.Получить("Проекты");
	Если Не ЗначениеЗаполнено(Проекты) Тогда
		Проекты = "";
	КонецЕсли;

	КоллекцияПроектов = СтрРазделить(Проекты, ",", Ложь);
	Замечания = Неопределено;
	Для Каждого ОписаниеПроекта Из ПроектыSQ Цикл
		
		Если КоллекцияПроектов.Количество() И КоллекцияПроектов.Найти(ОписаниеПроекта.Значение.Код) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Лог.Информация("	Формирование отчета для проекта `%1`", ОписаниеПроекта.Значение.Код);
		Замечания = Сонар.ПолучитьСводнуюИнформациюПоЗамечаниямиПроекта(АдресСервера, Токен, ОписаниеПроекта.Значение, СтатусыСтрокой, Замечания);
		
	КонецЦикла;
	
	КоллекцияОтчетов.Замечания = Замечания;
	КоллекцияОтчетов.Количество = КоллекцияОтчетов.Замечания.Количество();
	
	Лог.Информация("Сохранение отчетов в файл '%1'", ПутьКОтчету);
	СформироватьОтчет(КоллекцияОтчетов);
	
	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
	
КонецФункции 

///////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьПараметрыЗапуска(ПараметрыКоманды)
	
	ПрочитанныеПараметры = ОбщегоНазначения.ПрочитатьПараметрыЗапуска(ПараметрыКоманды, Истина);
	ОшибокНет = ПрочитанныеПараметры.Получить("ОшибокНет");
	МаксимальноеКоличествоСтатусов = 5;
		
	Если Не ЗначениеЗаполнено(ПрочитанныеПараметры.Получить("СтатусыСтрокой")) Тогда
		СтатусыСтрокой = "OPEN,CONFIRMED,REOPENED";
	Иначе
		Статусы = Новый Массив();
		СтатусыВрем = СтрРазделить(ВРЕГ(ПрочитанныеПараметры.Получить("СтатусыСтрокой")), ",", Ложь);
		ВсеСтатусы = СтрРазделить("OPEN,CONFIRMED,REOPENED,RESOLVED,CLOSED", ",");
		Для Каждого Статус Из СтатусыВрем Цикл
			Если ВсеСтатусы.Найти(Статус) <> Неопределено Тогда
				Статусы.Добавить(Статус);
			Иначе
				Лог.Ошибка("Неопознанный статус `%1`", Статус);
			КонецЕсли;
		КонецЦикла;
		Если Статусы.Количество() = 0 Тогда
			Лог.Ошибка("Указанный фильтр по статусам не содержит корректных значений");
			ОшибокНет = Ложь;
		КонецЕсли;		
		СтатусыСтрокой = СтрСоединить(Статусы, ",");
	КонецЕсли;
	
	ПутьКОтчету = ПрочитанныеПараметры.Получить("ПутьКОтчету");
	ФорматОтчета = ПрочитанныеПараметры.Получить("ФорматОтчета");
	
	Если Не ЗначениеЗаполнено(ФорматОтчета) Тогда
		ФорматОтчета = "JSON";
	Иначе
		ФорматОтчета = ПолучитьПравильныйФорматОтчета(ФорматОтчета, ОшибокНет);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьКОтчету) Тогда
		ПутьКОтчету = ОбъединитьПути(".", "report." + НРег(ФорматОтчета));
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

Функция ПолучитьПравильныйФорматОтчета(Знач ВыбранныйФорматОтчета, ОшибокНет)
	
	ВРЕГВыбранныйФорматОтчета = ВРЕГ(ВыбранныйФорматОтчета);
	Если ВРЕГВыбранныйФорматОтчета <> "JSON" Тогда
		
		ОшибокНет = Ложь;
		Лог.Ошибка("Указан неизвестный формат отчета `%1`", ОбщегоНазначения.ОбернутьЗначениеДляПечати(ВыбранныйФорматОтчета));
		
	КонецЕсли;
	
	Возврат ВРЕГВыбранныйФорматОтчета;
	
КонецФункции

Функция СоздатьКоллекциюОтчетов(АдресСервера) 
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаФормирования", ТекущаяДата());
	Результат.Вставить("СерверSonarQube", АдресСервера);
	Результат.Вставить("Количество", 0);
	Результат.Вставить("Замечания", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьОтчет(КоллекцияОтчетов)
	
	Если ФорматОтчета = "JSON" Тогда
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.ОткрытьФайл(ПутьКОтчету);
		КоллекцияОтчетов.Замечания = ТаблицаЗначенийВМассив(КоллекцияОтчетов.Замечания);
		ЗаписатьJSON(ЗаписьJSON, КоллекцияОтчетов);
		ЗаписьJSON.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений, РезультатВФиксированнуюКоллекцию = Ложь)
	
	МассивРезультат = Новый Массив();
	СтруктураСтрокой = "";
	НоваяСтрока = Неопределено;
	
	КолонкиСТипомТЧ = Новый Массив;
	
	Если ТипЗнч(ТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
		
		КолонкиТаблицы = ТаблицаЗначений.Колонки;
		
	ИначеЕсли ТипЗнч(ТаблицаЗначений) = Тип("Массив") И ТипЗнч(ТаблицаЗначений[0]) = Тип("СтрокаТаблицыЗначений") Тогда
		
		КолонкиТаблицы = ТаблицаЗначений[0].Владелец().Колонки;
		
	Иначе
		
		ВызватьИсключение "Не поддерживаемый тип параметра";
		
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		
		Возврат МассивРезультат;
		
	КонецЕсли;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		
		СтруктураСтрокой = СтруктураСтрокой + ?(ПустаяСтрока(СтруктураСтрокой), "", ",") + Колонка.Имя ;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Для Каждого КолонкаСТипомТЧ Из КолонкиСТипомТЧ Цикл
			
			Если ТипЗнч(Строка[КолонкаСТипомТЧ]) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока[КолонкаСТипомТЧ] = ТаблицаЗначенийВМассив(Строка[КолонкаСТипомТЧ], РезультатВФиксированнуюКоллекцию);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатВФиксированнуюКоллекцию Тогда
			
			НоваяСтрока = Новый ФиксированнаяСтруктура(НоваяСтрока);
			
		КонецЕсли;
		
		МассивРезультат.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Если РезультатВФиксированнуюКоллекцию Тогда
		
		МассивРезультат = Новый ФиксированныйМассив(МассивРезультат);
		
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции // ТаблицаЗначенийВМассив
